# Integrity levels
    Low - Low integrity is used with sandbox processes like web browsers
    Medium- Applications executing in the context of a regular user run at medium integrity
    High- administrators can execute applications at high integrity.
    System- used for SYSTEM services

Local administrators receive two access tokens when authenticating. first onfigured to create processes as medium integrity. 
When a user selects the "Run as administrator" option for an application, the second elevated token is used instead, and allows the process to run at high integrity.

we can easily view the available privileges for the current user with whoami from cmd.exe by specifying the /priv flag: whoami /priv
mpersonation tokens have four levels: Anonymous, Identification, Impersonation, and Delegation.10 Anonymous and Identification only allow enumeration of information.
For example, let's assume a user authenticates to a web server and performs an action on that server that requires a database lookup. The web service could use delegation to pass authentication to the database server "through" the web server.


In the past, security researchers have identified1 nine different privileges that may allow for privilege escalation from medium integrity to either high
integrity or system integrity, or enable compromise of processes running as another authenticated user.

-> SeImpersonatePrivilege allows us to impersonate any token for which we can get a reference, or handle. 
This privilege is quite interesting since the built-in Network Service account, the LocalService3 account, and the default IIS account have it assigned by default. 
Because of this, gaining code execution on a web server will often give us access to this privilege and potentially offer the possibility to escalate our access.

-> If we have the SeImpersonatePrivilege privilege we can often use the Win32 DuplicateTokenEx4 API to create a primary token from an impersonation token and 
create a new process in the context of the impersonated user.

-> When no tokens related to other user accounts are available in memory, we can likely force the SYSTEM account to give us a token that we can impersonate.

-> Pipes are a means of interprocess communication (IPC),7 just like RPC, COM, or even network sockets.

-> A pipe is a section of shared memory inside the kernel that processes can use for communication. One process can create a pipe (the pipe server) 
while other processes can connect to the pipe (pipe clients) and read/write information from/to it, depending on the configured access rights for a given pipe.

-> Anonymous8 pipes are typically used for communication between parent and child processes, while named9 pipes are more broadly used. 
In our examples we'll make use of named pipes, because they have more functionality and more importantly, they support impersonation.
